
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/demo_datasets.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_demo_datasets.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_demo_datasets.py:


Demo Datasets.
===================================================

In this example we show how to use the custom dataset class to load the predefined datasets in the repository.

.. GENERATED FROM PYTHON SOURCE LINES 10-12

Select Working Directory and Device
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: Python

    import os
    from random import randint

    from torch.utils.data import DataLoader

    os.chdir(os.path.dirname(os.getcwd()))
    print("Current Working Directory ", os.getcwd())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Current Working Directory  /home/runner/work/pycolibri/pycolibri




.. GENERATED FROM PYTHON SOURCE LINES 21-23

Load builtin dataset
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 23-35

.. code-block:: Python

    from colibri.data.datasets import CustomDataset


    name = 'fashion_mnist'  # ['cifar10', 'cifar100', 'mnist', 'fashion_mnist', 'cave']
    path = 'data'
    batch_size = 128
    builtin_train = True
    builtin_download = True

    dataset = CustomDataset(name, path, builtin_train, builtin_download)
    dataset_loader = DataLoader(dataset, batch_size=batch_size, shuffle=False, num_workers=0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0.00/26.4M [00:00<?, ?B/s]      0%|          | 32.8k/26.4M [00:00<01:59, 221kB/s]      0%|          | 65.5k/26.4M [00:00<02:01, 217kB/s]      0%|          | 131k/26.4M [00:00<01:23, 314kB/s]       1%|          | 229k/26.4M [00:00<00:58, 445kB/s]      2%|▏         | 459k/26.4M [00:00<00:31, 826kB/s]      3%|▎         | 918k/26.4M [00:00<00:16, 1.57MB/s]      7%|▋         | 1.84M/26.4M [00:01<00:08, 3.02MB/s]     14%|█▍        | 3.67M/26.4M [00:01<00:03, 5.88MB/s]     26%|██▌       | 6.91M/26.4M [00:01<00:01, 10.7MB/s]     41%|████▏     | 10.9M/26.4M [00:01<00:00, 15.5MB/s]     56%|█████▋    | 14.9M/26.4M [00:01<00:00, 18.7MB/s]     71%|███████   | 18.6M/26.4M [00:01<00:00, 19.8MB/s]     84%|████████▍ | 22.2M/26.4M [00:02<00:00, 20.6MB/s]     97%|█████████▋| 25.6M/26.4M [00:02<00:00, 21.0MB/s]    100%|██████████| 26.4M/26.4M [00:02<00:00, 12.2MB/s]
      0%|          | 0.00/29.5k [00:00<?, ?B/s]    100%|██████████| 29.5k/29.5k [00:00<00:00, 186kB/s]    100%|██████████| 29.5k/29.5k [00:00<00:00, 186kB/s]
      0%|          | 0.00/4.42M [00:00<?, ?B/s]      1%|          | 32.8k/4.42M [00:00<00:21, 205kB/s]      1%|▏         | 65.5k/4.42M [00:00<00:21, 204kB/s]      3%|▎         | 131k/4.42M [00:00<00:14, 298kB/s]       5%|▌         | 229k/4.42M [00:00<00:09, 422kB/s]     10%|█         | 459k/4.42M [00:00<00:05, 786kB/s]     20%|██        | 885k/4.42M [00:00<00:02, 1.43MB/s]     40%|████      | 1.77M/4.42M [00:01<00:00, 2.77MB/s]     81%|████████  | 3.57M/4.42M [00:01<00:00, 5.47MB/s]    100%|██████████| 4.42M/4.42M [00:01<00:00, 3.43MB/s]
      0%|          | 0.00/5.15k [00:00<?, ?B/s]    100%|██████████| 5.15k/5.15k [00:00<00:00, 42.4MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 36-38

Visualize cifar10 dataset
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 38-58

.. code-block:: Python


    import matplotlib.pyplot as plt

    data = next(iter(dataset_loader))
    image = data['input']
    label = data['output']

    plt.figure(figsize=(5, 5))
    plt.suptitle(f'{name.upper()} dataset Samples - range: [{image.min()}, {image.max()}]')

    for i in range(9):
        plt.subplot(3, 3, i + 1)
        plt.imshow(image[i].permute(2, 1, 0).cpu().numpy())
        plt.title(f'Label: {label[i]}')
        plt.axis('off')

    plt.tight_layout()
    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_demo_datasets_001.png
   :alt: FASHION_MNIST dataset Samples - range: [0.0, 1.0], Label: 9, Label: 0, Label: 0, Label: 3, Label: 0, Label: 2, Label: 7, Label: 2, Label: 5
   :srcset: /auto_examples/images/sphx_glr_demo_datasets_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-65

Cave dataset
-----------------------------------------------
CAVE is a database of multispectral images that were used to emulate the GAP camera.
The images are of a wide variety of real-world materials and objects.
You can download the dataset from the following link: http://www.cs.columbia.edu/CAVE/databases/multispectral/
Once downloaded, you must extract the files and place them in the 'data' folder.

.. GENERATED FROM PYTHON SOURCE LINES 65-74

.. code-block:: Python


    import requests
    import zipfile
    import os

    dataset = CustomDataset("cave", path)

    dataset_loader = DataLoader(dataset, batch_size=batch_size, shuffle=False, num_workers=0)








.. GENERATED FROM PYTHON SOURCE LINES 75-77

Visualize cave dataset
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 77-117

.. code-block:: Python


    def normalize(image):
        return (image - image.min()) / (image.max() - image.min())

    data = next(iter(dataset_loader))
    rgb_image = data['input']
    spec_image = data['output']

    [_, _, M, N] = spec_image.shape

    plt.figure(figsize=(8, 8))
    plt.suptitle(f'CAVE dataset Samples - spectral range: [{spec_image.min():.2f}, {spec_image.max():.2f}] - '
                 f'RGB range: [{rgb_image.min():.2f}, {rgb_image.max():.2f}]')

    for i in range(3):
        coord1 = [randint(0, M-1), randint(0, N-1)]
        coord2 = [randint(0, M-1), randint(0, N-1)]

        plt.subplot(3, 3, (3 * i) + 1)
        plt.imshow(normalize(rgb_image[i].permute(1, 2, 0).cpu().numpy()))
        plt.title('rgb')
        plt.axis('off')

        plt.subplot(3, 3, (3 * i) + 2)
        plt.imshow(normalize(spec_image[i, [18, 12, 8]].permute(1, 2, 0).cpu().numpy()))
        plt.scatter(coord1[1], coord1[0], s=120, edgecolors='black')
        plt.scatter(coord2[1], coord2[0], s=120, edgecolors='black')
        plt.title('spec bands [18, 12, 8]')
        plt.axis('off')

        plt.subplot(3, 3, (3 * i) + 3)
        plt.plot(normalize(spec_image[i, :, coord1[0], coord1[1]].cpu().numpy()), linewidth=2, label='p1')
        plt.plot(normalize(spec_image[i, :, coord2[0], coord1[1]].cpu().numpy()), linewidth=2, label='p2')
        plt.title('spec signatures')
        plt.xlabel('Wavelength [nm]')
        plt.grid()
        plt.legend()

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_demo_datasets_002.png
   :alt: CAVE dataset Samples - spectral range: [0.00, 0.97] - RGB range: [0.00, 1.00], rgb, spec bands [18, 12, 8], spec signatures, rgb, spec bands [18, 12, 8], spec signatures, rgb, spec bands [18, 12, 8], spec signatures
   :srcset: /auto_examples/images/sphx_glr_demo_datasets_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 26.653 seconds)


.. _sphx_glr_download_auto_examples_demo_datasets.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_datasets.ipynb <demo_datasets.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_datasets.py <demo_datasets.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_datasets.zip <demo_datasets.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
